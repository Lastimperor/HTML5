- Create a Table

Before displaying data, you must first create the table that will contain the data by using the <table> element.

<table>

</table>

The <table> element will contain all of the tabular data you plan on displaying.

- Table Rows

The first step in entering data into the table is to add rows using the table row element: <tr>.

<table>
  <tr>
  </tr>
  <tr>
  </tr>
</table>
In the example above, two rows have been added to the table.

- Table Data

Rows aren't sufficient to add data to a table. Each cell element must also be defined. 
In HTML, you can add data using the table data element: <td>.

<table>
  <tr>
    <td>73</td>
    <td>81</td>
  </tr>
</table>

- Table Headings

Table data doesn't make much sense without titles to describe what the data represents.

To add titles to rows and columns, you can use the table heading element: <th>.
Just like table data, a table heading must be placed within a table row.

<table>
  <tr>
    <th></th>
    <th scope="col">Saturday</th>
    <th scope="col">Sunday</th>
  </tr>
  <tr>
    <th scope="row">Temperature</th>
    <td>73</td>
    <td>81</td>
  </tr>
</table>

First, a new row was added to hold the three headings: a blank heading, a Saturday heading, and a Sunday heading. 
The blank heading creates the extra table cell necessary to align the table headings correctly over the data they correspond to.

In the second row, one table heading was added as a row title: Temperature.

Note, also, the use of the scope attribute, which can take one of two values:

row - this value makes it clear that the heading is for a row.
col - this value makes it clear that the heading is for a column.

- Table Borders

n older versions of HTML, a border could be added to a table using the border attribute and setting it equal to an integer. 
This integer would represent the thickness of the border.

<table border="1">
  <tr>
    <td>73</td>
    <td>81</td>
  </tr>
</table>

The browser will likely still interpret your code correct if you use the border attribute, but that doesn't mean the attribute should be used. 
Instead, you can achieve the same effect using CSS.

table, td {
  border: 1px solid black;
}

- Spanning Columns

For example, a personal calendar could have events that span across multiple hours, or even multiple days.

Data can span columns using the colspan attribute. 
The attributes accepts an integer (greater than or equal to 1) to denote the number of columns it spans across.

<table>
  <tr>
    <th>Monday</th>
    <th>Tuesday</th>
    <th>Wednesday</th>
  </tr>
  <tr>
    <td colspan="2">Out of Town</td>
    <td>Back in Town</td>
  </tr>
</table>
In the example above, the data Out of Town spans the Monday and Tuesday table headings using the value 2 (two columns). 
The data Back in Town appear only under the Wednesday heading.

- Spanning Rows

Data can also span multiple rows using the rowspan attribute.

The rowspan attribute is used for data that spans multiple rows (perhaps an event goes on for multiple hours on a certain day). 
It accepts an integer (greater than or equal to 1) to denote the number of rows it spans across.

- Table Body

Long tables can be sectioned off using the table body element: <tbody>.

- Table Head

When a table's body is sectioned off, however, it also makes sense to section off the table's headings using the <thead> element.

<table>
  <thead>
    <tr>
      <th></th>
      <th>Saturday</th>
      <th>Sunday</th>
    </tr>
  </thead>
  <tbody>
  
  - Table Footer
  
The bottom part of a long table can also be sectioned off using the <tfoot> element.

 ...
 </tbody>
    <tfoot>
      <td>Total</td>
      <td>28</td>
    </tfoot>
  </table>

- Styling with CSS

You can use CSS to style tables just like you have done in the past. 
Specifically, you can change style the various aspects mentioned above.

table, th, td {
  border: 1px solid black;
  font-family: Arial, sans-serif;
  text-align: center;
}
