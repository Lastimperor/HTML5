- How a Form Works

We can think of the internet as a network of computers which send and receive information. 
Computers need an HTTP request to know how to communicate.

The <form> element is a great tool for collecting information, but then we need to send that information somewhere else for processing.

ex.

<form action="/example.html" method="POST">
  <h1>Creating a form</h1>
  <p>Looks like you want to learn how to create an HTML form.</p>
</form>

the action attribute determines where the information is sent.
the method attribute is assigned a HTTP verb that is included in the HTTP request. 

- Text Input

If we want to create an input field in our <form>, we'll need the help of the <input> element.

The <input> element has:

a type attribute which determines how it renders on the web page and what kind of data it can accept.
a name attribute for the <input> — without the name attribute, information in the <input> won't be sent when the <form> is submitted.
default value for the value attribute so that users have a pre-filled text field when they first see the rendered form. 

ex. <input type="text" name="username" value="Davie"> 

- Adding a Label

For a user to properly identify an <input> we use the appropriately named <label> element.

The <label> element has an opening and closing tag and displays text that is written between the opening and closing tags. 
To associate a <label> and an <input>, the <input> needs an id attribute. 
We then assign the for attribute of the <label> element with the value of the id attribute of <input>, like so:

<form action="/example.html" method="POST">
  <label for="meal">What do you want to eat?</label>
  <br>
  <input type="text" name="food" id="meal">
</form>

- Password Input

We wouldn't want our information to be seen by anyone peeking over our shoulder! 
Luckily, we have the type="password" attribute for <input>!

An <input type ="password"> element will replace input text with another character like an asterisk (*) or a dot (•). 
The code below provides an example of how to create a password field:

<form>
  <label for="user-password">Password: </label>
  <input type="password" name="user-password" id="user-password">
</form>
After a user types into the field, it would look like:

password field in a form with 6 dots showing text added to the field

- Number Input

By setting type="number" for an <input> we can restrict what users type into the input field to just numbers 
(and a few special characters like -, +, and .). 
We can also provide a step attribute which creates arrows inside the input field 
to increase or decrease by the value of the step attribute. 
ex.

<form>
  <label for="years"> Years of experience: </label>
  <input id="years" name="years" type="number" step="1">
</form>

- Range Input

 if we wanted to limit what numbers our users could type we might consider using a different type value. 
 Another option we could use is setting type to "range" which creates a slider.
 
 To set the minimum and maximum values of the slider we assign values to the min and max attribute of the <input>. 
 We could also control how smooth and fluid the slider works by assigning the step attribute a value. 
 Smaller step values will make the slider more fluidly, whereas larger step values will make the slider move more noticeably. 
ex.

<form>
  <label for="volume"> Volume Control</label>
  <input id="volume" name="volume" type="range" min="0" max="100" step="1">
</form>

- Checkbox Input

what if we presented multiple options to users and allow them to select any number of options?

In a <form> we would use the <input> element and set type="checkbox"

ex.
<form>
  <p>Choose your pizza toppings:</p>
  <label for="cheese">Extra cheese</label>
  <input id="cheese" name="topping" type="checkbox" value="cheese">
  <br>
  <label for="pepperoni">Pepperoni</label>
  <input id="pepperoni" name="topping" type="checkbox" value="pepperoni">
  <br>
  <label for="anchovy">Anchovy</label>
  <input id="anchovy" name="topping" type="checkbox" value="anchovy">
</form>

there are assigned values to the value attribute of the checkboxes. 
These values are not visible on the form itself, that's why it is important that we use an associated <label> to identify the checkbox.
each <input> has the same value for the name attribute. 
Using the same name for each checkbox groups the <input>s together. 
However, each <input> has a unique id to pair with a <label>.
 
- Radio Button Input

here are cases where we want to present multiple options and only allow for one selection — 
like asking users if they agree or disagree with the terms and conditions.

radio buttons (like checkboxes) do not display their value. We have an associated <label> to represent the value of the radio button. 
To group radio buttons together, we assign them the same name and only one radio button from that group can be selected.

ex. 

<form>
  <p>What is sum of 1 + 1?</p>
  <input type="radio" id="two" name="answer" value="2">
  <label for="two">2</label>
  <br>
  <input type="radio" id="eleven" name="answer" value="11">
  <label for="eleven">11</label>
</form>

- Dropdown list

if we have a whole list of options!

An alternative solution is to use a dropdown list to allow our users to choose one option from an organized list. Here's the code to create a dropdown menu:

ex.

<form>
  <label for="lunch">What's for lunch?</label>
  <select id="lunch" name="lunch">
    <option value="pizza">Pizza</option>
    <option value="curry">Curry</option>
    <option value="salad">Salad</option>
    <option value="ramen">Ramen</option>
    <option value="tacos">Tacos</option>
  </select>
</form>

Notice in the code that we're using the element <select> to create the dropdown list. 
To populate the dropdown list, we add multiple <option> elements, each with a value attribute. 
By default, only one of these options can be selected.

The text rendered is the text included between the opening and closing <option> tags. 
However, it is the value of the value attribute that is used in <form> submission (notice the difference in the text and value capitalization). 
When the <form> is submitted, the information from this input field will be sent using the name of the <select> and the value of the chosen <option>. 
For instance, if a user selected Pizza from the dropdown list, the information would be sent as "lunch=pizza".

- Datalist Input

Even if we have an organized dropdown list, if the list has a lot of options, it could be tedious for users to scroll through the entire list to locate one option. 
That's where using the <datalist> element comes in handy.

The <datalist> is used with an <input type="text"> element. 
The <input> creates a text field that users can type into and filter options from the <datalist>. 

ex.

<form>
  <label for="city">Ideal city to visit?</label>
  <input type="text" list="cities" id="city" name="city">

  <datalist id="cities">
    <option value="New York City"></option>
    <option value="Tokyo"></option>
    <option value="Barcelona"></option> 
  </datalist>
</form>
 
Notice, in the code above, we have an <input> that has a list attribute. 
The <input> is associated to the <datalist> via the <input>'s list attribute and the id of the <datalist>.

- Textarea element

An <input> element with type="text" creates a single row input field for users to type in information. 
if users need to write in more information, instead of using an <input>, we could use <textarea>.

ex.
<section class="extra-info">
  <label for="extra">Anything else you want to add?</label>
    <br>
      <textarea id="extra" name="extra" rows="3" cols="40">extra info
      </textarea>  
</section> 
 
- Submit Form

 the purpose of a form is to collect information that will be submitted. 
 That's the role of the submit button — users click on it when they are finished with filling out information in the <form> 
 
 ex.
 
 <form>
  <input type="submit" value="Send">
</form>
 
 If there isn't a value attribute, the default text, 'Submit' shows up on the button.
 
